name: Main automation

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-beta*'

concurrency:
  group: main-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

  build-and-publish-docker-image:
    runs-on: ubuntu-latest
    needs: compute-build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.PREPROD_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.PREPROD_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SWAGGER_ENABLE:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SWAGGER_ENABLE
            PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/PORT
            POSTGRES_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_HOST
            POSTGRES_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_USERNAME
            POSTGRES_PASSWORD:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_PASSWORD
            POSTGRES_DB:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_DB
            POSTGRES_DB_CITY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_DB_CITY
            POSTGRES_DB_LOCATIONS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_DB_LOCATIONS
            SUBSTRATE_URL:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SUBSTRATE_URL
            ADMIN_SUBSTRATE_MNEMONIC:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ADMIN_SUBSTRATE_MNEMONIC
            WEB3_RPC:${{ secrets.PREPROD_GCP_PROJECT_ID }}/WEB3_RPC
            WEB3_RPC_HTTPS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/WEB3_RPC_HTTPS
            DEBIO_ESCROW_PRIVATE_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/DEBIO_ESCROW_PRIVATE_KEY
            ESCROW_CONTRACT_ADDRESS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ESCROW_CONTRACT_ADDRESS
            COINMARKETCAP_API_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            RECAPTCHA_SECRET_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/RECAPTCHA_SECRET_KEY
            DEBIO_API_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/DEBIO_API_KEY
            ELASTICSEARCH_NODE:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ELASTICSEARCH_NODE
            ELASTICSEARCH_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ELASTICSEARCH_USERNAME
            ELASTICSEARCH_PASSWORD:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ELASTICSEARCH_PASSWORD
            EMAIL:${{ secrets.PREPROD_GCP_PROJECT_ID }}/EMAIL
            PASS_EMAIL:${{ secrets.PREPROD_GCP_PROJECT_ID }}/PASS_EMAIL
            EMAILS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/EMAILS
            BUCKET_NAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/BUCKET_NAME
            STORAGE_BASE_URI:${{ secrets.PREPROD_GCP_PROJECT_ID }}/STORAGE_BASE_URI
            GOOGLE_APPLICATION_CREDENTIALS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/GOOGLE_APPLICATION_CREDENTIALS
      - name: Create .env & gcp sa
        shell: bash
        run: |
          tee -a .env <<EOF
          SWAGGER_ENABLE=${{ steps.secrets.outputs.SWAGGER_ENABLE }}
          PORT=${{ steps.secrets.outputs.PORT }}
          HOST_POSTGRES=${{ steps.secrets.outputs.POSTGRES_HOST }}
          USERNAME_POSTGRES=${{ steps.secrets.outputs.POSTGRES_USERNAME }}
          PASSWORD_POSTGRES=${{ steps.secrets.outputs.POSTGRES_PASSWORD }}
          DB_POSTGRES=${{ steps.secrets.outputs.POSTGRES_DB }}
          DB_CITY=${{ steps.secrets.outputs.POSTGRES_DB_CITY }}
          DB_LOCATIONS=${{ steps.secrets.outputs.POSTGRES_DB_LOCATIONS }}
          SUBSTRATE_URL=${{ steps.secrets.outputs.SUBSTRATE_URL }}
          ADMIN_SUBSTRATE_MNEMONIC=${{ steps.secrets.outputs.ADMIN_SUBSTRATE_MNEMONIC }}
          WEB3_RPC=${{ steps.secrets.outputs.WEB3_RPC }}
          WEB3_RPC_HTTPS=${{ steps.secrets.outputs.WEB3_RPC_HTTPS }}
          DEBIO_ESCROW_PRIVATE_KEY=${{ steps.secrets.outputs.DEBIO_ESCROW_PRIVATE_KEY }}
          ESCROW_CONTRACT_ADDRESS=${{ steps.secrets.outputs.ESCROW_CONTRACT_ADDRESS }}
          COINMARKETCAP_API_KEY=${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }}
          RECAPTCHA_SECRET_KEY=${{ steps.secrets.outputs.RECAPTCHA_SECRET_KEY }}
          DEBIO_API_KEY=${{ steps.secrets.outputs.DEBIO_API_KEY }}
          ELASTICSEARCH_NODE=${{ steps.secrets.outputs.ELASTICSEARCH_NODE }}
          ELASTICSEARCH_USERNAME=${{ steps.secrets.outputs.ELASTICSEARCH_USERNAME }}
          ELASTICSEARCH_PASSWORD=${{ steps.secrets.outputs.ELASTICSEARCH_PASSWORD }}
          EMAIL=${{ steps.secrets.outputs.EMAIL }}
          PASS_EMAIL=${{ steps.secrets.outputs.PASS_EMAIL }}
          EMAILS=${{ steps.secrets.outputs.EMAILS }}
          BUCKET_NAME=${{ steps.secrets.outputs.BUCKET_NAME }}
          STORAGE_BASE_URI=${{ steps.secrets.outputs.STORAGE_BASE_URI }}
          EOF
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-main
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.compute-build-info.outputs.latest_tag }}
            ${{ github.repository }}:latest-beta
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: [build-and-publish-docker-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: '.github/workflows/rcb_config.json'
      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: true
          prerelease: true

  deploy:
    runs-on: ubuntu-latest
    needs: [compute-build-info, publish-draft-release]
    env:
      DEPLOY: ${{ secrets.PREPROD_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.PREPROD_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.PREPROD_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SWAGGER_ENABLE:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SWAGGER_ENABLE
            PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/PORT
            POSTGRES_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_HOST
            POSTGRES_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_USERNAME
            POSTGRES_PASSWORD:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_PASSWORD
            POSTGRES_DB:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_DB
            POSTGRES_DB_CITY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_DB_CITY
            POSTGRES_DB_LOCATIONS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/POSTGRES_DB_LOCATIONS
            SUBSTRATE_URL:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SUBSTRATE_URL
            ADMIN_SUBSTRATE_MNEMONIC:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ADMIN_SUBSTRATE_MNEMONIC
            WEB3_RPC:${{ secrets.PREPROD_GCP_PROJECT_ID }}/WEB3_RPC
            WEB3_RPC_HTTPS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/WEB3_RPC_HTTPS
            DEBIO_ESCROW_PRIVATE_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/DEBIO_ESCROW_PRIVATE_KEY
            ESCROW_CONTRACT_ADDRESS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ESCROW_CONTRACT_ADDRESS
            COINMARKETCAP_API_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            RECAPTCHA_SECRET_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/RECAPTCHA_SECRET_KEY
            DEBIO_API_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/DEBIO_API_KEY
            ELASTICSEARCH_NODE:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ELASTICSEARCH_NODE
            ELASTICSEARCH_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ELASTICSEARCH_USERNAME
            ELASTICSEARCH_PASSWORD:${{ secrets.PREPROD_GCP_PROJECT_ID }}/ELASTICSEARCH_PASSWORD
            EMAIL:${{ secrets.PREPROD_GCP_PROJECT_ID }}/EMAIL
            PASS_EMAIL:${{ secrets.PREPROD_GCP_PROJECT_ID }}/PASS_EMAIL
            EMAILS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/EMAILS
            BUCKET_NAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/BUCKET_NAME
            STORAGE_BASE_URI:${{ secrets.PREPROD_GCP_PROJECT_ID }}/STORAGE_BASE_URI
            GOOGLE_APPLICATION_CREDENTIALS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/GOOGLE_APPLICATION_CREDENTIALS
            SSH_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-backend debio/debio-backend \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.port=${{ steps.secrets.outputs.PORT }} \
              --set-string config.postgres.host=${{ steps.secrets.outputs.POSTGRES_HOST }} \
              --set-string config.postgres.username=${{ steps.secrets.outputs.POSTGRES_USERNAME }} \
              --set-string config.postgres.password=${{ steps.secrets.outputs.POSTGRES_PASSWORD }} \
              --set-string config.postgres.dbname=${{ steps.secrets.outputs.POSTGRES_DB }} \
              --set-string config.postgres.dbCity=${{ steps.secrets.outputs.POSTGRES_DB_CITY }} \
              --set-string config.postgres.dbLocations=${{ steps.secrets.outputs.POSTGRES_DB_LOCATIONS }} \
              --set-string config.substrateURL=${{ steps.secrets.outputs.SUBSTRATE_URL }} \
              --set-string config.escrowSubstrateMnemonic="${{ steps.secrets.outputs.ADMIN_SUBSTRATE_MNEMONIC }}" \
              --set-string config.web3RPC=${{ steps.secrets.outputs.WEB3_RPC }} \
              --set-string config.web3RPCHttps=${{ steps.secrets.outputs.WEB3_RPC_HTTPS }} \
              --set-string config.debioEscrowPrivateKey=${{ steps.secrets.outputs.DEBIO_ESCROW_PRIVATE_KEY }} \
              --set-string config.escrowContractAddress=${{ steps.secrets.outputs.ESCROW_CONTRACT_ADDRESS }} \
              --set-string config.coinmarketcapApiKey=${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }} \
              --set-string config.recaptchaSecretKey=${{ steps.secrets.outputs.RECAPTCHA_SECRET_KEY }} \
              --set-string config.debioApiKey=${{ steps.secrets.outputs.DEBIO_API_KEY }} \
              --set-string config.elastic.node=${{ steps.secrets.outputs.ELASTICSEARCH_NODE }} \
              --set-string config.elastic.username=${{ steps.secrets.outputs.ELASTICSEARCH_USERNAME }} \
              --set-string config.elastic.password=${{ steps.secrets.outputs.ELASTICSEARCH_PASSWORD }} \
              --set-string config.email.email=${{ steps.secrets.outputs.EMAIL }} \
              --set-string config.email.password=${{ steps.secrets.outputs.PASS_EMAIL }} \
              --set-string config.email.emails=${{ steps.secrets.outputs.EMAILS }} \
              --set-string config.bucketname=${{ steps.secrets.outputs.BUCKET_NAME }} \
              --set-string config.storageBaseURI=${{ steps.secrets.outputs.STORAGE_BASE_URI }} \
              --set-string config.google.serviceAccountBase64=${{ steps.secrets.outputs.GOOGLE_APPLICATION_CREDENTIALS }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
              --set-string ingress.hosts[0].host=api.testnet.debio.network \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=debio-backend-tls \
              --set-string ingress.tls[0].hosts[0]=api.testnet.debio.network \
              --set autoscaling.enabled=true
            kubectl rollout status deployment/debio-backend
