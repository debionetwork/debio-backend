name: Deploy automation

on:
  release:
    types: [published]
  workflow_run:
    workflows: ['Builder']
    branches: [main]
    types:
      - completed

concurrency:
  group: deploy-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

  deploy-beta-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: [compute-build-info]
    env:
      DEPLOY: ${{ secrets.TESTNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.TESTNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.TESTNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.TESTNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SWAGGER_ENABLE:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SWAGGER_ENABLE
            PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PORT
            POSTGRES_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/POSTGRES_HOST
            POSTGRES_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/POSTGRES_USERNAME
            POSTGRES_PASSWORD:${{ secrets.TESTNET_GCP_PROJECT_ID }}/POSTGRES_PASSWORD
            POSTGRES_DB:${{ secrets.TESTNET_GCP_PROJECT_ID }}/POSTGRES_DB
            POSTGRES_DB_CITY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/POSTGRES_DB_CITY
            POSTGRES_DB_LOCATIONS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/POSTGRES_DB_LOCATIONS
            SUBSTRATE_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SUBSTRATE_URL            
            ADMIN_SUBSTRATE_MNEMONIC:${{ secrets.TESTNET_GCP_PROJECT_ID }}/ADMIN_SUBSTRATE_MNEMONIC                        
            WEB3_RPC:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB3_RPC
            WEB3_RPC_HTTPS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/WEB3_RPC_HTTPS
            DEBIO_ESCROW_PRIVATE_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/DEBIO_ESCROW_PRIVATE_KEY
            ESCROW_CONTRACT_ADDRESS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/ESCROW_CONTRACT_ADDRESS            
            COINMARKETCAP_API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            RECAPTCHA_SECRET_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/RECAPTCHA_SECRET_KEY
            DEBIO_API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/DEBIO_API_KEY
            ELASTICSEARCH_NODE:${{ secrets.TESTNET_GCP_PROJECT_ID }}/ELASTICSEARCH_NODE
            ELASTICSEARCH_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/ELASTICSEARCH_USERNAME
            ELASTICSEARCH_PASSWORD:${{ secrets.TESTNET_GCP_PROJECT_ID }}/ELASTICSEARCH_PASSWORD
            REDIS_STORE_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_STORE_URL
            REDIS_STORE_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_STORE_USERNAME
            REDIS_STORE_PASSWORD:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_STORE_PASSWORD
            REDIS_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            EMAIL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/EMAIL
            PASS_EMAIL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PASS_EMAIL
            EMAILS:${{ secrets.TESTNET_GCP_PROJECT_ID }}/EMAILS
            BUCKET_NAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/BUCKET_NAME
            STORAGE_BASE_URI:${{ secrets.TESTNET_GCP_PROJECT_ID }}/STORAGE_BASE_URI
            PINATA_API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_API_KEY
            PINATA_SECRET_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_SECRET_KEY
            PINATA_EMAIL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_EMAIL
            PINATA_USER_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_USER_ID
            PINATA_EMAIL_VERIFIED:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_EMAIL_VERIFIED
            PINATA_MFA_ENABLED:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_MFA_ENABLED
            PINATA_PIN_POLICY_REGION_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_PIN_POLICY_REGION_ID
            PINATA_PIN_POLICY_REGION_REPL_COUNT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/PINATA_PIN_POLICY_REGION_REPL_COUNT
            UNSTAKE_INTERVAL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/UNSTAKE_INTERVAL
            UNSTAKE_TIMER:${{ secrets.TESTNET_GCP_PROJECT_ID }}/UNSTAKE_TIMER
            SENTRY_DSN:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SENTRY_DSN
            API_HEALTHCHECK_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/API_HEALTHCHECK_URL
            SSH_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-backend debio/debio-backend \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.sha_short }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set-string config.swagger.enable=${{ steps.secrets.outputs.SWAGGER_ENABLE }} \
              --set-string config.port=${{ steps.secrets.outputs.PORT }} \
              --set-string config.postgres.host=${{ steps.secrets.outputs.POSTGRES_HOST }} \
              --set-string config.postgres.username=${{ steps.secrets.outputs.POSTGRES_USERNAME }} \
              --set-string config.postgres.password=${{ steps.secrets.outputs.POSTGRES_PASSWORD }} \
              --set-string config.postgres.dbname=${{ steps.secrets.outputs.POSTGRES_DB }} \
              --set-string config.postgres.dbCity=${{ steps.secrets.outputs.POSTGRES_DB_CITY }} \
              --set-string config.postgres.dbLocations=${{ steps.secrets.outputs.POSTGRES_DB_LOCATIONS }} \
              --set-string config.substrateURL=${{ steps.secrets.outputs.SUBSTRATE_URL }} \
              --set-string config.adminSubstrateMnemonic="${{ steps.secrets.outputs.ADMIN_SUBSTRATE_MNEMONIC }}" \
              --set-string config.web3RPC=${{ steps.secrets.outputs.WEB3_RPC }} \
              --set-string config.web3RPCHttps=${{ steps.secrets.outputs.WEB3_RPC_HTTPS }} \
              --set-string config.debioEscrowPrivateKey=${{ steps.secrets.outputs.DEBIO_ESCROW_PRIVATE_KEY }} \
              --set-string config.escrowContractAddress=${{ steps.secrets.outputs.ESCROW_CONTRACT_ADDRESS }} \
              --set-string config.coinmarketcapApiKey="${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }}" \
              --set-string config.recaptchaSecretKey=${{ steps.secrets.outputs.RECAPTCHA_SECRET_KEY }} \
              --set-string config.debioApiKey=${{ steps.secrets.outputs.DEBIO_API_KEY }} \
              --set-string config.elastic.node=${{ steps.secrets.outputs.ELASTICSEARCH_NODE }} \
              --set-string config.elastic.username=${{ steps.secrets.outputs.ELASTICSEARCH_USERNAME }} \
              --set-string config.elastic.password=${{ steps.secrets.outputs.ELASTICSEARCH_PASSWORD }} \
              --set-string config.redisStore.url=${{ steps.secrets.outputs.REDIS_STORE_URL }} \
              --set-string config.redisStore.username=${{ steps.secrets.outputs.REDIS_STORE_USERNAME }} \
              --set-string config.redisStore.password=${{ steps.secrets.outputs.REDIS_STORE_PASSWORD }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.email.email=${{ steps.secrets.outputs.EMAIL }} \
              --set-string config.email.password=${{ steps.secrets.outputs.PASS_EMAIL }} \
              --set-string config.email.emails="${{ steps.secrets.outputs.EMAILS }}" \
              --set-string config.bucketname=${{ steps.secrets.outputs.BUCKET_NAME }} \
              --set-string config.storageBaseURI=${{ steps.secrets.outputs.STORAGE_BASE_URI }} \
              --set-string config.pinata.apiKey=${{ steps.secrets.outputs.PINATA_API_KEY }} \
              --set-string config.pinata.secretKey=${{ steps.secrets.outputs.PINATA_SECRET_KEY }} \
              --set-string config.pinata.email=${{ steps.secrets.outputs.PINATA_EMAIL }} \
              --set-string config.pinata.userID=${{ steps.secrets.outputs.PINATA_USER_ID }} \
              --set-string config.pinata.emailVerified=${{ steps.secrets.outputs.PINATA_EMAIL_VERIFIED }} \
              --set-string config.pinata.mfaEnable=${{ steps.secrets.outputs.PINATA_MFA_ENABLED }} \
              --set-string config.pinata.pinPolicyRegionID=${{ steps.secrets.outputs.PINATA_PIN_POLICY_REGION_ID }} \
              --set-string config.pinata.pinPolicyRegionReplCount=${{ steps.secrets.outputs.PINATA_PIN_POLICY_REGION_REPL_COUNT }} \
              --set-string config.unstake.interval=${{ steps.secrets.outputs.UNSTAKE_INTERVAL }} \
              --set-string config.unstake.timer=${{ steps.secrets.outputs.UNSTAKE_TIMER }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.SENTRY_DSN }} \
              --set-string config.healthcheck=http://localhost:3000/health/ping \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"=/\$2\$3 \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-type"="basic" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-secret"="auth-fe" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-realm"="Authentication Required" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/enable-cors"="true" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-methods"="GET\, PUT\, POST\, DELETE\, PATCH\, OPTIONS" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-headers"="Origin\,DNT\,X-CustomHeader\,Keep-Alive\,User-Agent\,X-Requested-With\,If-Modified-Since\,Cache-Control\,Content-Type\,Authorization\,Accept\,debio-api-key" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-origin"="https://app.testnet.debio.network\, https://lab.testnet.debio.network" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-credentials"="true" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-max-age"="600" \
              --set-string ingress.hosts[0].host=api.testnet.debio.network \
              --set-string ingress.hosts[0].paths[0].path=/\(\)\(.\*\) \
              --set-string ingress.hosts[0].paths[0].pathType=Prefix \
              --set-string ingress.hosts[0].paths[1].path=/conversion/\(\)\(.\*\) \
              --set-string ingress.hosts[0].paths[1].pathType=Prefix \
              --set-string ingress.hosts[0].paths[1].serviceName=debio-conversion \
              --set-string ingress.hosts[0].paths[1].servicePort=80 \
              --set-string ingress.tls[0].secretName=debio-backend-tls \
              --set-string ingress.tls[0].hosts[0]=api.testnet.debio.network \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=11 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/debio-backend
      - name: Sleuth webhook
        if: "${{ env.DEPLOY == 'true' }}"
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.TESTNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.API_SLEUTH_WEBHOOK }}

  deploy-pre-release:
    if: "github.event.release.prerelease && contains(needs.compute-build-info.outputs.latest_tag, 'rc')"
    runs-on: ubuntu-latest
    needs: [compute-build-info]
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SWAGGER_ENABLE:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SWAGGER_ENABLE
            PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PORT
            POSTGRES_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_HOST
            POSTGRES_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_USERNAME
            POSTGRES_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_PASSWORD
            POSTGRES_DB:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_DB
            POSTGRES_DB_CITY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_DB_CITY
            POSTGRES_DB_LOCATIONS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_DB_LOCATIONS
            SUBSTRATE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SUBSTRATE_URL            
            ADMIN_SUBSTRATE_MNEMONIC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ADMIN_SUBSTRATE_MNEMONIC                        
            WEB3_RPC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB3_RPC
            WEB3_RPC_HTTPS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB3_RPC_HTTPS
            DEBIO_ESCROW_PRIVATE_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/DEBIO_ESCROW_PRIVATE_KEY
            ESCROW_CONTRACT_ADDRESS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ESCROW_CONTRACT_ADDRESS            
            COINMARKETCAP_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            RECAPTCHA_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/RECAPTCHA_SECRET_KEY
            DEBIO_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/DEBIO_API_KEY
            ELASTICSEARCH_NODE:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ELASTICSEARCH_NODE
            ELASTICSEARCH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ELASTICSEARCH_USERNAME
            ELASTICSEARCH_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ELASTICSEARCH_PASSWORD
            REDIS_STORE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_STORE_URL
            REDIS_STORE_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_STORE_USERNAME
            REDIS_STORE_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_STORE_PASSWORD
            REDIS_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            EMAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/EMAIL
            PASS_EMAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PASS_EMAIL
            EMAILS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/EMAILS
            BUCKET_NAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/BUCKET_NAME
            STORAGE_BASE_URI:${{ secrets.MAINNET_GCP_PROJECT_ID }}/STORAGE_BASE_URI
            PINATA_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_API_KEY
            PINATA_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_SECRET_KEY
            PINATA_EMAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_EMAIL
            PINATA_USER_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_USER_ID
            PINATA_EMAIL_VERIFIED:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_EMAIL_VERIFIED
            PINATA_MFA_ENABLED:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_MFA_ENABLED
            PINATA_PIN_POLICY_REGION_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_PIN_POLICY_REGION_ID
            PINATA_PIN_POLICY_REGION_REPL_COUNT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_PIN_POLICY_REGION_REPL_COUNT
            UNSTAKE_INTERVAL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/UNSTAKE_INTERVAL
            UNSTAKE_TIMER:${{ secrets.MAINNET_GCP_PROJECT_ID }}/UNSTAKE_TIMER
            SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SENTRY_DSN
            API_HEALTHCHECK_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/API_HEALTHCHECK_URL
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-backend debio/debio-backend \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set-string config.swagger.enable=${{ steps.secrets.outputs.SWAGGER_ENABLE }} \
              --set-string config.port=${{ steps.secrets.outputs.PORT }} \
              --set-string config.postgres.host=${{ steps.secrets.outputs.POSTGRES_HOST }} \
              --set-string config.postgres.username=${{ steps.secrets.outputs.POSTGRES_USERNAME }} \
              --set-string config.postgres.password=${{ steps.secrets.outputs.POSTGRES_PASSWORD }} \
              --set-string config.postgres.dbname=${{ steps.secrets.outputs.POSTGRES_DB }} \
              --set-string config.postgres.dbCity=${{ steps.secrets.outputs.POSTGRES_DB_CITY }} \
              --set-string config.postgres.dbLocations=${{ steps.secrets.outputs.POSTGRES_DB_LOCATIONS }} \
              --set-string config.substrateURL=${{ steps.secrets.outputs.SUBSTRATE_URL }} \
              --set-string config.adminSubstrateMnemonic="${{ steps.secrets.outputs.ADMIN_SUBSTRATE_MNEMONIC }}" \
              --set-string config.web3RPC=${{ steps.secrets.outputs.WEB3_RPC }} \
              --set-string config.web3RPCHttps=${{ steps.secrets.outputs.WEB3_RPC_HTTPS }} \
              --set-string config.debioEscrowPrivateKey=${{ steps.secrets.outputs.DEBIO_ESCROW_PRIVATE_KEY }} \
              --set-string config.escrowContractAddress=${{ steps.secrets.outputs.ESCROW_CONTRACT_ADDRESS }} \
              --set-string config.coinmarketcapApiKey="${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }}" \
              --set-string config.recaptchaSecretKey=${{ steps.secrets.outputs.RECAPTCHA_SECRET_KEY }} \
              --set-string config.debioApiKey=${{ steps.secrets.outputs.DEBIO_API_KEY }} \
              --set-string config.elastic.node=${{ steps.secrets.outputs.ELASTICSEARCH_NODE }} \
              --set-string config.elastic.username=${{ steps.secrets.outputs.ELASTICSEARCH_USERNAME }} \
              --set-string config.elastic.password=${{ steps.secrets.outputs.ELASTICSEARCH_PASSWORD }} \
              --set-string config.redisStore.url=${{ steps.secrets.outputs.REDIS_STORE_URL }} \
              --set-string config.redisStore.username=${{ steps.secrets.outputs.REDIS_STORE_USERNAME }} \
              --set-string config.redisStore.password=${{ steps.secrets.outputs.REDIS_STORE_PASSWORD }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.email.email=${{ steps.secrets.outputs.EMAIL }} \
              --set-string config.email.password=${{ steps.secrets.outputs.PASS_EMAIL }} \
              --set-string config.email.emails="${{ steps.secrets.outputs.EMAILS }}" \
              --set-string config.bucketname=${{ steps.secrets.outputs.BUCKET_NAME }} \
              --set-string config.storageBaseURI=${{ steps.secrets.outputs.STORAGE_BASE_URI }} \
              --set-string config.pinata.apiKey=${{ steps.secrets.outputs.PINATA_API_KEY }} \
              --set-string config.pinata.secretKey=${{ steps.secrets.outputs.PINATA_SECRET_KEY }} \
              --set-string config.pinata.email=${{ steps.secrets.outputs.PINATA_EMAIL }} \
              --set-string config.pinata.userID=${{ steps.secrets.outputs.PINATA_USER_ID }} \
              --set-string config.pinata.emailVerified=${{ steps.secrets.outputs.PINATA_EMAIL_VERIFIED }} \
              --set-string config.pinata.mfaEnable=${{ steps.secrets.outputs.PINATA_MFA_ENABLED }} \
              --set-string config.pinata.pinPolicyRegionID=${{ steps.secrets.outputs.PINATA_PIN_POLICY_REGION_ID }} \
              --set-string config.pinata.pinPolicyRegionReplCount=${{ steps.secrets.outputs.PINATA_PIN_POLICY_REGION_REPL_COUNT }} \
              --set-string config.unstake.interval=${{ steps.secrets.outputs.UNSTAKE_INTERVAL }} \
              --set-string config.unstake.timer=${{ steps.secrets.outputs.UNSTAKE_TIMER }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.SENTRY_DSN }} \
              --set-string config.healthcheck=http://localhost:3000/health/ping \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"=/\$2\$3 \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-type"="basic" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-secret"="auth-fe" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-realm"="Authentication Required" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/enable-cors"="true" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-methods"="GET\, PUT\, POST\, DELETE\, PATCH\, OPTIONS" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-headers"="Origin\,DNT\,X-CustomHeader\,Keep-Alive\,User-Agent\,X-Requested-With\,If-Modified-Since\,Cache-Control\,Content-Type\,Authorization\,Accept\,debio-api-key" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-origin"="https://app.debio.network\, https://lab.debio.network" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-credentials"="true" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-max-age"="600" \
              --set-string ingress.hosts[0].host=api.debio.network \
              --set-string ingress.hosts[0].paths[0].path=/\(\)\(.\*\) \
              --set-string ingress.hosts[0].paths[0].pathType=Prefix \
              --set-string ingress.hosts[0].paths[1].path=/conversion/\(\)\(.\*\) \
              --set-string ingress.hosts[0].paths[1].pathType=Prefix \
              --set-string ingress.hosts[0].paths[1].serviceName=debio-conversion \
              --set-string ingress.hosts[0].paths[1].servicePort=80 \
              --set-string ingress.tls[0].secretName=debio-backend-tls \
              --set-string ingress.tls[0].hosts[0]=api.debio.network \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=11 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/debio-backend
      - name: Sleuth webhook
        if: "${{ env.DEPLOY == 'true' }}"
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.API_SLEUTH_WEBHOOK }}

  deploy-release:
    if: "startsWith(github.ref, 'refs/tags/') && !github.event.release.prerelease"
    runs-on: ubuntu-latest
    needs: [compute-build-info]
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SWAGGER_ENABLE:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SWAGGER_ENABLE
            PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PORT
            POSTGRES_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_HOST
            POSTGRES_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_USERNAME
            POSTGRES_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_PASSWORD
            POSTGRES_DB:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_DB
            POSTGRES_DB_CITY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_DB_CITY
            POSTGRES_DB_LOCATIONS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/POSTGRES_DB_LOCATIONS
            SUBSTRATE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SUBSTRATE_URL            
            ADMIN_SUBSTRATE_MNEMONIC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ADMIN_SUBSTRATE_MNEMONIC                        
            WEB3_RPC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB3_RPC
            WEB3_RPC_HTTPS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/WEB3_RPC_HTTPS
            DEBIO_ESCROW_PRIVATE_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/DEBIO_ESCROW_PRIVATE_KEY
            ESCROW_CONTRACT_ADDRESS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ESCROW_CONTRACT_ADDRESS            
            COINMARKETCAP_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            RECAPTCHA_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/RECAPTCHA_SECRET_KEY
            DEBIO_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/DEBIO_API_KEY
            ELASTICSEARCH_NODE:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ELASTICSEARCH_NODE
            ELASTICSEARCH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ELASTICSEARCH_USERNAME
            ELASTICSEARCH_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ELASTICSEARCH_PASSWORD
            REDIS_STORE_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_STORE_URL
            REDIS_STORE_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_STORE_USERNAME
            REDIS_STORE_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_STORE_PASSWORD
            REDIS_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            EMAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/EMAIL
            PASS_EMAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PASS_EMAIL
            EMAILS:${{ secrets.MAINNET_GCP_PROJECT_ID }}/EMAILS
            BUCKET_NAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/BUCKET_NAME
            STORAGE_BASE_URI:${{ secrets.MAINNET_GCP_PROJECT_ID }}/STORAGE_BASE_URI
            PINATA_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_API_KEY
            PINATA_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_SECRET_KEY
            PINATA_EMAIL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_EMAIL
            PINATA_USER_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_USER_ID
            PINATA_EMAIL_VERIFIED:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_EMAIL_VERIFIED
            PINATA_MFA_ENABLED:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_MFA_ENABLED
            PINATA_PIN_POLICY_REGION_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_PIN_POLICY_REGION_ID
            PINATA_PIN_POLICY_REGION_REPL_COUNT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/PINATA_PIN_POLICY_REGION_REPL_COUNT
            UNSTAKE_INTERVAL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/UNSTAKE_INTERVAL
            UNSTAKE_TIMER:${{ secrets.MAINNET_GCP_PROJECT_ID }}/UNSTAKE_TIMER
            SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SENTRY_DSN
            API_HEALTHCHECK_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/API_HEALTHCHECK_URL
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-backend debio/debio-backend \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set-string config.swagger.enable=${{ steps.secrets.outputs.SWAGGER_ENABLE }} \
              --set-string config.port=${{ steps.secrets.outputs.PORT }} \
              --set-string config.postgres.host=${{ steps.secrets.outputs.POSTGRES_HOST }} \
              --set-string config.postgres.username=${{ steps.secrets.outputs.POSTGRES_USERNAME }} \
              --set-string config.postgres.password=${{ steps.secrets.outputs.POSTGRES_PASSWORD }} \
              --set-string config.postgres.dbname=${{ steps.secrets.outputs.POSTGRES_DB }} \
              --set-string config.postgres.dbCity=${{ steps.secrets.outputs.POSTGRES_DB_CITY }} \
              --set-string config.postgres.dbLocations=${{ steps.secrets.outputs.POSTGRES_DB_LOCATIONS }} \
              --set-string config.substrateURL=${{ steps.secrets.outputs.SUBSTRATE_URL }} \
              --set-string config.adminSubstrateMnemonic="${{ steps.secrets.outputs.ADMIN_SUBSTRATE_MNEMONIC }}" \
              --set-string config.web3RPC=${{ steps.secrets.outputs.WEB3_RPC }} \
              --set-string config.web3RPCHttps=${{ steps.secrets.outputs.WEB3_RPC_HTTPS }} \
              --set-string config.debioEscrowPrivateKey=${{ steps.secrets.outputs.DEBIO_ESCROW_PRIVATE_KEY }} \
              --set-string config.escrowContractAddress=${{ steps.secrets.outputs.ESCROW_CONTRACT_ADDRESS }} \
              --set-string config.coinmarketcapApiKey="${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }}" \
              --set-string config.recaptchaSecretKey=${{ steps.secrets.outputs.RECAPTCHA_SECRET_KEY }} \
              --set-string config.debioApiKey=${{ steps.secrets.outputs.DEBIO_API_KEY }} \
              --set-string config.elastic.node=${{ steps.secrets.outputs.ELASTICSEARCH_NODE }} \
              --set-string config.elastic.username=${{ steps.secrets.outputs.ELASTICSEARCH_USERNAME }} \
              --set-string config.elastic.password=${{ steps.secrets.outputs.ELASTICSEARCH_PASSWORD }} \
              --set-string config.redisStore.url=${{ steps.secrets.outputs.REDIS_STORE_URL }} \
              --set-string config.redisStore.username=${{ steps.secrets.outputs.REDIS_STORE_USERNAME }} \
              --set-string config.redisStore.password=${{ steps.secrets.outputs.REDIS_STORE_PASSWORD }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.email.email=${{ steps.secrets.outputs.EMAIL }} \
              --set-string config.email.password=${{ steps.secrets.outputs.PASS_EMAIL }} \
              --set-string config.email.emails="${{ steps.secrets.outputs.EMAILS }}" \
              --set-string config.bucketname=${{ steps.secrets.outputs.BUCKET_NAME }} \
              --set-string config.storageBaseURI=${{ steps.secrets.outputs.STORAGE_BASE_URI }} \
              --set-string config.pinata.apiKey=${{ steps.secrets.outputs.PINATA_API_KEY }} \
              --set-string config.pinata.secretKey=${{ steps.secrets.outputs.PINATA_SECRET_KEY }} \
              --set-string config.pinata.email=${{ steps.secrets.outputs.PINATA_EMAIL }} \
              --set-string config.pinata.userID=${{ steps.secrets.outputs.PINATA_USER_ID }} \
              --set-string config.pinata.emailVerified=${{ steps.secrets.outputs.PINATA_EMAIL_VERIFIED }} \
              --set-string config.pinata.mfaEnable=${{ steps.secrets.outputs.PINATA_MFA_ENABLED }} \
              --set-string config.pinata.pinPolicyRegionID=${{ steps.secrets.outputs.PINATA_PIN_POLICY_REGION_ID }} \
              --set-string config.pinata.pinPolicyRegionReplCount=${{ steps.secrets.outputs.PINATA_PIN_POLICY_REGION_REPL_COUNT }} \
              --set-string config.unstake.interval=${{ steps.secrets.outputs.UNSTAKE_INTERVAL }} \
              --set-string config.unstake.timer=${{ steps.secrets.outputs.UNSTAKE_TIMER }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.SENTRY_DSN }} \
              --set-string config.healthcheck=http://localhost:3000/health/ping \
              --set ingress.enabled=true \
              --set-string ingress.className=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"=/\$2\$3 \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-type"="basic" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-secret"="auth-fe" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/auth-realm"="Authentication Required" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/enable-cors"="true" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-methods"="GET\, PUT\, POST\, DELETE\, PATCH\, OPTIONS" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-headers"="Origin\,DNT\,X-CustomHeader\,Keep-Alive\,User-Agent\,X-Requested-With\,If-Modified-Since\,Cache-Control\,Content-Type\,Authorization\,Accept\,debio-api-key" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-origin"="https://app.debio.network\, https://lab.debio.network" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-allow-credentials"="true" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/cors-max-age"="600" \
              --set-string ingress.hosts[0].host=api.debio.network \
              --set-string ingress.hosts[0].paths[0].path=/\(\)\(.\*\) \
              --set-string ingress.hosts[0].paths[0].pathType=Prefix \
              --set-string ingress.hosts[0].paths[1].path=/conversion/\(\)\(.\*\) \
              --set-string ingress.hosts[0].paths[1].pathType=Prefix \
              --set-string ingress.hosts[0].paths[1].serviceName=debio-conversion \
              --set-string ingress.hosts[0].paths[1].servicePort=80 \
              --set-string ingress.tls[0].secretName=debio-backend-tls \
              --set-string ingress.tls[0].hosts[0]=api.debio.network \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=11 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/debio-backend
      - name: Sleuth webhook
        if: "${{ env.DEPLOY == 'true' }}"
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.API_SLEUTH_WEBHOOK }}
