name: Main automation

on:
  push:
    branches:
      - main

concurrency:
  group: main-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest

    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

  build-and-publish-docker-image:
    runs-on: ubuntu-latest

    needs: compute-build-info

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Vault Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULTURL }}
          token: ${{ secrets.VAULTTOKEN }}
          caCertificate: ${{ secrets.VAULTCA }}
          secrets: |
              debio_development/data/backend_v2 bucket_name;
              debio_development/data/backend_v2 coinmarketcap_api_key;
              debio_development/data/backend_v2 contract_address;
              debio_development/data/backend_v2 db_city;
              debio_development/data/backend_v2 db_locations;
              debio_development/data/backend_v2 db_pass;
              debio_development/data/backend_v2 db_postgres;
              debio_development/data/backend_v2 db_username;
              debio_development/data/backend_v2 debio_api_key;
              debio_development/data/backend_v2 debio_escrow_private_key;
              debio_development/data/backend_v2 debio_eth_address;
              debio_development/data/backend_v2 elasticsearch_node;
              debio_development/data/backend_v2 elasticsearch_password;
              debio_development/data/backend_v2 elasticsearch_username;
              debio_development/data/backend_v2 escrow_contract_address;
              debio_development/data/backend_v2 escrow_substrate_mnemonic;
              debio_development/data/backend_v2 faucet_substrate_mnemonic;
              debio_development/data/backend_v2 host_postgres;
              debio_development/data/backend_v2 password_postgres;
              debio_development/data/backend_v2 port;
              debio_development/data/backend_v2 recaptcha_secret_key;
              debio_development/data/backend_v2 service_request_contract_address;
              debio_development/data/backend_v2 storage_base_uri;
              debio_development/data/backend_v2 substrate_url;
              debio_development/data/backend_v2 sudo_substrate_mnemonic;
              debio_development/data/backend_v2 username_postgres;
              debio_development/data/backend_v2 web3_rpc;

      - name: Create .env & gcp sa
        shell: bash
        run: |
          tee -a .env <<EOF
          BUCKET_NAME=$BUCKET_NAME
          COINMARKETCAP_API_KEY=$COINMARKETCAP_API_KEY
          CONTRACT_ADDRESS=$CONTRACT_ADDRESS
          DB_CITY=$DB_CITY
          DB_LOCATIONS=$DB_LOCATIONS
          DB_PASS=$DB_PASS
          DB_POSTGRES=$DB_POSTGRES
          DB_USERNAME=$DB_USERNAME
          DEBIO_API_KEY=$DEBIO_API_KEY
          DEBIO_ESCROW_PRIVATE_KEY=$DEBIO_ESCROW_PRIVATE_KEY
          DEBIO_ETH_ADDRESS=$DEBIO_ETH_ADDRESS
          ELASTICSEARCH_NODE=$ELASTICSEARCH_NODE
          ELASTICSEARCH_PASSWORD=$ELASTICSEARCH_PASSWORD
          ELASTICSEARCH_USERNAME=$ELASTICSEARCH_USERNAME
          ESCROW_CONTRACT_ADDRESS=$ESCROW_CONTRACT_ADDRESS
          ESCROW_SUBSTRATE_MNEMONIC=$ESCROW_SUBSTRATE_MNEMONIC
          FAUCET_SUBSTRATE_MNEMONIC=$FAUCET_SUBSTRATE_MNEMONIC
          HOST_POSTGRES=$HOST_POSTGRES
          PASSWORD_POSTGRES=$PASSWORD_POSTGRES
          PORT=$PORT
          RECAPTCHA_SECRET_KEY=$RECAPTCHA_SECRET_KEY
          SERVICE_REQUEST_CONTRACT_ADDRESS=$SERVICE_REQUEST_CONTRACT_ADDRESS
          STORAGE_BASE_URI=$STORAGE_BASE_URI
          SUBSTRATE_URL=$SUBSTRATE_URL
          SUDO_SUBSTRATE_MNEMONIC=$SUDO_SUBSTRATE_MNEMONIC
          USERNAME_POSTGRES=$USERNAME_POSTGRES
          WEB3_RPC=$WEB3_RPC
          EOF

          tee -a gcp_sa.json <<EOF
          ${{ secrets.GCP_SA }}
          EOF

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-main
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.compute-build-info.outputs.sha_short }}-${{ needs.compute-build-info.outputs.date }}
            ${{ github.repository }}:latest-pre-alpha
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest

    needs: [compute-build-info, build-and-publish-docker-image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.DEV_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.DEV_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            CONTRACT_ADDRESS:${{ secrets.DEV_GCP_PROJECT_ID }}/CONTRACT_ADDRESS
            HOST_POSTGRES:${{ secrets.DEV_GCP_PROJECT_ID }}/HOST_POSTGRES
            USERNAME_POSTGRES:${{ secrets.DEV_GCP_PROJECT_ID }}/USERNAME_POSTGRES
            PASSWORD_POSTGRES:${{ secrets.DEV_GCP_PROJECT_ID }}/PASSWORD_POSTGRES
            DB_POSTGRES:${{ secrets.DEV_GCP_PROJECT_ID }}/DB_POSTGRES
            DB_LOCATIONS:${{ secrets.DEV_GCP_PROJECT_ID }}/DB_LOCATIONS
            ELASTICSEARCH_NODE:${{ secrets.DEV_GCP_PROJECT_ID }}/ELASTICSEARCH_NODE
            SUBSTRATE_URL:${{ secrets.DEV_GCP_PROJECT_ID }}/SUBSTRATE_URL
            ESCROW_SUBSTRATE_MNEMONIC:${{ secrets.DEV_GCP_PROJECT_ID }}/ESCROW_SUBSTRATE_MNEMONIC
            FAUCET_SUBSTRATE_MNEMONIC:${{ secrets.DEV_GCP_PROJECT_ID }}/FAUCET_SUBSTRATE_MNEMONIC
            SUDO_SUBSTRATE_MNEMONIC:${{ secrets.DEV_GCP_PROJECT_ID }}/SUDO_SUBSTRATE_MNEMONIC
            WEB3_RPC:${{ secrets.DEV_GCP_PROJECT_ID }}/WEB3_RPC
            WEB3_RPC_HTTPS:${{ secrets.DEV_GCP_PROJECT_ID }}/WEB3_RPC_HTTPS
            DEBIO_ESCROW_PRIVATE_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/DEBIO_ESCROW_PRIVATE_KEY
            DEBIO_ETH_ADDRESS:${{ secrets.DEV_GCP_PROJECT_ID }}/DEBIO_ETH_ADDRESS
            COINMARKETCAP_API_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            RECAPTCHA_SECRET_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/RECAPTCHA_SECRET_KEY
            DEBIO_API_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/DEBIO_API_KEY
            BUCKET_NAME:${{ secrets.DEV_GCP_PROJECT_ID }}/BUCKET_NAME
            STORAGE_BASE_URI:${{ secrets.DEV_GCP_PROJECT_ID }}/STORAGE_BASE_URI
            EMAIL:${{ secrets.DEV_GCP_PROJECT_ID }}/EMAIL
            PASS_EMAIL:${{ secrets.DEV_GCP_PROJECT_ID }}/PASS_EMAIL
            GOOGLE_APPLICATION_CREDENTIALS:${{ secrets.DEV_GCP_PROJECT_ID }}/GOOGLE_APPLICATION_CREDENTIALS
            STARTUP_PROB_PATH:${{ secrets.DEV_GCP_PROJECT_ID }}/STARTUP_PROB_PATH
            LIVENESS_PROB_PATH:${{ secrets.DEV_GCP_PROJECT_ID }}/LIVENESS_PROB_PATH
            READINESS_PROB_PATH:${{ secrets.DEV_GCP_PROJECT_ID }}/READINESS_PROB_PATH
            SSH_HOST:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_PORT

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-backend debio/debio-backend \
              --install \
              --set-string config.contractAddress=${{ steps.secrets.outputs.CONTRACT_ADDRESS }} \
              --set-string config.postgres.hostPostgres=${{ steps.secrets.outputs.HOST_POSTGRES }} \
              --set-string config.postgres.usernamePostgres=${{ steps.secrets.outputs.USERNAME_POSTGRES }} \
              --set-string config.postgres.passwordPostgres=${{ steps.secrets.outputs.PASSWORD_POSTGRES }} \
              --set-string config.postgres.dbPostgres=${{ steps.secrets.outputs.DB_POSTGRES }} \
              --set-string config.postgres.dbLocation=${{ steps.secrets.outputs.DB_LOCATIONS }} \
              --set-string config.elastic.elasticsearchNode=${{ steps.secrets.outputs.ELASTICSEARCH_NODE }} \
              --set-string config.substrateURL=${{ steps.secrets.outputs.SUBSTRATE_URL }} \
              --set-string config.escrowMnemonic="${{ steps.secrets.outputs.ESCROW_SUBSTRATE_MNEMONIC }}" \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_SUBSTRATE_MNEMONIC }}" \
              --set-string config.sudoMnemonic="${{ steps.secrets.outputs.SUDO_SUBSTRATE_MNEMONIC }}" \
              --set-string config.web3RPCHttp=${{ steps.secrets.outputs.WEB3_RPC }} \
              --set-string config.web3RPCHttps=${{ steps.secrets.outputs.WEB3_RPC_HTTPS }} \
              --set-string config.debioEscrowPrivateKey=${{ steps.secrets.outputs.DEBIO_ESCROW_PRIVATE_KEY }} \
              --set-string config.debioETHAddress=${{ steps.secrets.outputs.DEBIO_ETH_ADDRESS }} \
              --set-string config.coinMarketcapApiKey=${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }} \
              --set-string config.recaptchaSecretKey=${{ steps.secrets.outputs.RECAPTCHA_SECRET_KEY }} \
              --set-string config.debioApiKey=${{ steps.secrets.outputs.DEBIO_API_KEY }} \
              --set-string config.bucketName=${{ steps.secrets.outputs.BUCKET_NAME }} \
              --set-string config.storageBaseURL=${{ steps.secrets.outputs.STORAGE_BASE_URI }} \
              --set-string config.email.email=${{ steps.secrets.outputs.EMAIL }} \
              --set-string config.email.passEmail=${{ steps.secrets.outputs.PASS_EMAIL }} \
              --set-string config.gcs.serviceAccountBase64=${{ steps.secrets.outputs.GOOGLE_APPLICATION_CREDENTIALS }} \
              --set-string config.startupProbe.path=${{ steps.secrets.outputs.STARTUP_PROB_PATH }} \
              --set-string config.livenessProbe.path=${{ steps.secrets.outputs.LIVENESS_PROB_PATH }} \
              --set-string config.readinessProbe.path=${{ steps.secrets.outputs.READINESS_PROB_PATH }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
              --set-string ingress.hosts[0].host=api.dev.debio.network \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=debio-backend-tls \
              --set-string ingress.tls[0].hosts[0]=api.dev.debio.network \
              --set autoscaling.enabled=true
            kubectl rollout status deployment/debio-backend
